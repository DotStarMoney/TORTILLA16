--lpm_clshift CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" LPM_SHIFTTYPE="ARITHMETIC" LPM_WIDTH=8 LPM_WIDTHDIST=3 data direction distance result underflow
--VERSION_BEGIN 11.1SP2 cbx_lpm_clshift 2012:01:25:21:14:56:SJ cbx_mgl 2012:01:25:21:17:49:SJ  VERSION_END


-- Copyright (C) 1991-2011 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = 
SUBDESIGN lpm_clshift_lsd
( 
	data[7..0]	:	input;
	direction	:	input;
	distance[2..0]	:	input;
	result[7..0]	:	output;
	underflow	:	output;
) 
VARIABLE 
	direction_w[0..0]	: WIRE;
	inz_w[8..0]	: WIRE;
	pad_left_w[3..0]	: WIRE;
	pad_right_w0w[1..0]	: WIRE;
	pad_right_w1w[2..0]	: WIRE;
	pad_right_w2w[4..0]	: WIRE;
	sbit_w[31..0]	: WIRE;
	uf_w[8..0]	: WIRE;

BEGIN 
	direction_w[] = ( direction);
	inz_w[] = ( B"0", ((data[7..7] $ data[7..7]) # inz_w[8..8]), ((data[7..7] $ data[6..6]) # inz_w[7..7]), ((data[7..7] $ data[5..5]) # inz_w[6..6]), ((data[7..7] $ data[4..4]) # inz_w[5..5]), ((data[7..7] $ data[3..3]) # inz_w[4..4]), ((data[7..7] $ data[2..2]) # inz_w[3..3]), ((data[7..7] $ data[1..1]) # inz_w[2..2]), ((data[7..7] $ data[0..0]) # inz_w[1..1]));
	pad_left_w[] = B"0000";
	pad_right_w0w[] = ( sbit_w[7..7], sbit_w[7..7]);
	pad_right_w1w[] = ( sbit_w[15..15], sbit_w[15..15], sbit_w[15..15]);
	pad_right_w2w[] = ( sbit_w[23..23], sbit_w[23..23], sbit_w[23..23], sbit_w[23..23], sbit_w[23..23]);
	result[7..0] = sbit_w[31..24];
	sbit_w[] = ( ((((distance[2..2] & (! direction_w[])) & ( sbit_w[19..16], pad_left_w[3..0])) # ((distance[2..2] & direction_w[]) & ( pad_right_w2w[3..0], sbit_w[23..20]))) # ((! distance[2..2]) & sbit_w[23..16])), ((((distance[1..1] & (! direction_w[])) & ( sbit_w[13..8], pad_left_w[1..0])) # ((distance[1..1] & direction_w[]) & ( pad_right_w1w[1..0], sbit_w[15..10]))) # ((! distance[1..1]) & sbit_w[15..8])), ((((distance[0..0] & (! direction_w[])) & ( sbit_w[6..0], pad_left_w[0..0])) # ((distance[0..0] & direction_w[]) & ( pad_right_w0w[0..0], sbit_w[7..1]))) # ((! distance[0..0]) & sbit_w[7..0])), data[]);
	uf_w[] = ( B"0", ((data[7..7] $ sbit_w[31..31]) # uf_w[8..8]), ((data[7..7] $ sbit_w[30..30]) # uf_w[7..7]), ((data[7..7] $ sbit_w[29..29]) # uf_w[6..6]), ((data[7..7] $ sbit_w[28..28]) # uf_w[5..5]), ((data[7..7] $ sbit_w[27..27]) # uf_w[4..4]), ((data[7..7] $ sbit_w[26..26]) # uf_w[3..3]), ((data[7..7] $ sbit_w[25..25]) # uf_w[2..2]), ((data[7..7] $ sbit_w[24..24]) # uf_w[1..1]));
	underflow = ((direction_w[0..0] & (! uf_w[0..0])) & inz_w[0..0]);
END;
--VALID FILE
